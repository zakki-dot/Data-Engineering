# -*- coding: utf-8 -*-
"""data_intergration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TsGMz456NIOOPmH6_YjUD377pvJvIcL6
"""

import pandas as pd

census_df = pd.read_csv("acs2017_county_data.csv", usecols=["County", "State", "TotalPop", "IncomePerCap", "Poverty", "Unemployment"])


cases_df = pd.read_csv("covid_confirmed_usafacts.csv", usecols=["County Name", "State", "2023-07-23"])


deaths_df = pd.read_csv("covid_deaths_usafacts.csv", usecols=["County Name", "State", "2023-07-23"])

print("cases_df columns:")
print(cases_df.columns.tolist())

print("\ndeaths_df columns:")
print(deaths_df.columns.tolist())

print("\ncensus_df columns:")
print(census_df.columns.tolist())

cases_df["County Name"] = cases_df["County Name"].str.strip()
deaths_df["County Name"] = deaths_df["County Name"].str.strip()

# Test search in cases_df
print("cases_df match:")
print(cases_df[cases_df["County Name"] == "Washington County"])

# Test search in deaths_df
print("\ndeaths_df match:")
print(deaths_df[deaths_df["County Name"] == "Washington County"])

# Count in cases_df
cases_count = (cases_df["County Name"] == "Washington County").sum()
print(f"Washington County rows in cases_df: {cases_count}")

# Count in deaths_df
deaths_count = (deaths_df["County Name"] == "Washington County").sum()
print(f"Washington County rows in deaths_df: {deaths_count}")

# Remove rows where County Name is "Statewide Unallocated"
cases_df = cases_df[cases_df["County Name"] != "Statewide Unallocated"]
deaths_df = deaths_df[deaths_df["County Name"] != "Statewide Unallocated"]

# Show how many rows remain in each
print(f"Remaining rows in cases_df: {len(cases_df)}")
print(f"Remaining rows in deaths_df: {len(deaths_df)}")

# First, import the state abbreviation dictionaries from the us_state_abbrev.py file
from us_state_abbrev import us_state_to_abbrev, abbrev_to_us_state

# Convert state abbreviations to full state names in cases_df
cases_df['State'] = cases_df['State'].map(abbrev_to_us_state)

# Convert state abbreviations to full state names in deaths_df
deaths_df['State'] = deaths_df['State'].map(abbrev_to_us_state)

# Display the first few rows of both DataFrames to verify the changes
print("First few rows of cases_df after conversion:")
print(cases_df.head())

print("First few rows of deaths_df after conversion:")
print(deaths_df.head())

# Recreate the 'key' column using the actual column names in census_df
census_df['key'] = census_df['County'] + ', ' + census_df['State']

# Preview to confirm 'key' was created successfully
print("First few rows of census_df after recreating the 'key' column:")
print(census_df[['County', 'State', 'key']].head())

# Now set 'key' as the index
census_df = census_df.set_index('key')

# Confirm index change
print("\nFirst few rows of census_df after setting 'key' as index:")
print(census_df.head())

# Step 1: Rename the confusing date column
cases_df = cases_df.rename(columns={"2023-07-23": "Cases"})
deaths_df = deaths_df.rename(columns={"2023-07-23": "Deaths"})

# Step 2: Show the updated list of column names for each DataFrame
print("Updated columns in cases_df:")
print(cases_df.columns.values.tolist())

print("\nUpdated columns in deaths_df:")
print(deaths_df.columns.values.tolist())

# Step 1: Confirm and set 'key' as index only if needed
if 'key' in cases_df.columns:
    cases_df = cases_df.set_index('key')

if 'key' in deaths_df.columns:
    deaths_df = deaths_df.set_index('key')

if 'key' in census_df.columns:
    census_df = census_df.set_index('key')

# Step 2: Join census_df with cases_df
join_df = census_df.join(cases_df[['Cases']], how='inner')

# Step 3: Join the result with deaths_df
join_df = join_df.join(deaths_df[['Deaths']], how='inner')

print("\nFirst few rows of join_df after merging all three DataFrames:")
print(join_df.head())

# Step 4: Add per capita columns
join_df['CasesPerCap'] = join_df['Cases'] / join_df['TotalPop']
join_df['DeathsPerCap'] = join_df['Deaths'] / join_df['TotalPop']

print("\nFirst few rows of join_df with CasesPerCap and DeathsPerCap:")
print(join_df[['Cases', 'Deaths', 'TotalPop', 'CasesPerCap', 'DeathsPerCap']].head())

# Step 5: Show number of rows in final joined DataFrame
print("\nNumber of rows in join_df:")
print(len(join_df))

# Step 1: Select only numeric columns from join_df
numeric_df = join_df.select_dtypes(include=['number'])

# Step 2: Compute the correlation matrix
correlation_matrix = numeric_df.corr()

# Step 3: Display the correlation matrix
print("Correlation matrix of numeric columns in join_df:")
print(correlation_matrix)

import seaborn as sns
import matplotlib.pyplot as plt

# Create the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)

plt.title('Correlation Matrix Heatmap')
plt.tight_layout()
plt.show()